репозиторий препода: https://github.com/ashipovalov/sqa-046

мой репозиторий: https://github.com/pnmreff/luxoft.java_for_testng

рекомендованные книги:
    Изучаем Java, O'Relly
    Head First Design Pattern, O'Relly
    Thinking in Java
    xUnit Test Pattern

сборку делаем через Gradle.
особенности: не перекомпиливает весь проект, только измененные файлы
Основные команды:
build,
run,
wrapper: создает в папке проекта файлы gradlew, gradle. Нужно когда пересылают проект, при запуске команды gradlew run, если не установлен gradle, запускает скачивание.


интересные статьи:
https://www.ibm.com/developerworks/ru/library/j-cq09187/index.html
https://en.wikipedia.org/wiki/Behavior-driven_development
https://habr.com/post/332754/


14/06/2018
подключаем testng к проекту
ссылки: http://search.maven.org/#artifactdetails%7Corg.testng%7Ctestng%7C6.14.3%7Cjar
        https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
добавляем их в проект и обновляем проект на вкладке gradle(Refresh button)

тестовые методы всегда имеют тип void.
нужно пометить метод как тестовый: аннотация @Test
если класс помечен аннотацией @Test то TestNG запускает все методы помеченные этой аннотацией или все публичные методы и только после этого уничтожает объект класса.
Junit создает объект запускает один публичный метод, уничтожает объект класса, потом опять создает объект класса и запускает следующий публичный метод. Сделано это следуя принципу что методы тестирования должны быть максимально независимы.

assert - ключевое слово java, выбрасывает исключение определенного типа. парсит строку из двух параметров и оператора сравнения.
Assert - класс фреймворка TestNG, где много static.

написали свои тесты

http://shipovalov.net/main_page.php, логин\пароль student/luxoft

установили selenium рекордер для FireFox:
    https://www.seleniumhq.org/

В репозитории код должен быть компилируем.

импортировали в gradle зависимости для selenium.

Создаем свой тест на создание issue для проекта mantis на сайте http://shipovalov.net/main_page.php. Пока не запускаем, т.к. драйвер не установлен.

Реализация интерфейса WebDriver для каждого браузера своя, для запуска тестов нужен драйвер, его установка происходит отдельно и он не устанавливается вместе с рекордером.

разделяем макрос на методы, более понятные пользователю теста: правая кнопка мыши -> Refactor -> Extract -> method

как искать локаторы в браузере: в браузере перейти в консоль и набрать $$(имя локатора)(возвращает коллекцию всех совпадений. если использовать один $ то вернеться только первый элемент), или через debug в IDEA, или через value в консоле отладки

для поиска xPath в локаторах можно использовать расширение для Хрома: ChromePath

Selenium работает не с визуальным представлением а в DOM-деревом, поэтому для поиска элементов можно использовать объект document.get..{Element, byName...}

Настройки IE для запуска Selenium: для всех зон должен быть выставлен одинаковый уровень(IE option -> security -> везде в медиум например), zoom на 100%

driver.quit - все закрывает, оправляет объект в корзину
driver.close - закрывает окно запуска

создаем класс родитель TestBase и...
правая кнопка мыши -> refactor -> pull members up и переносим туда все общие методы из класса наследника TestBase. В классах наследниках оставляем только тесты. Подчищаем ненужные зависимости.
создаем класс наследник для тестирования модификации проекта testProjectModification.

зона видимости protected(по умолчанию) видит класс и наследники класса.

для мониторинга запуска тестов в testng можно создать Listener и подключить через аннотацию @Listener
для мониторинга запуска тестов в jUnit нужно настраивать Rules.

testNG настраивается через testNG.xml. В gradle, при зупуске тестов можно указать путь к этому файлу. Пример в репозитории.

далее начинаем оптимизацию кода, используем паттерн Builder, для удобства создания объекта.
